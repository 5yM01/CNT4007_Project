BitTorrent Project Notes

-Protocol Description
--TCP
--Symmetrical Interaction between Peers (messages look the same)
--Handshake then stream of length-prefixed messages
--Connection established via back and forth handshake then other messages

Messages
--Handshake (32 Bytes)
---Header (18 Bytes)
----"P2PFILESHARINGPROJ"
---Zero Bits (10 Bytes)
---Peer ID (4 Bytes)
----Integer representation of peer ID

--Actual (Variable Length)
---Length (4 Bytes)
----Length of Message excluding 4 Bytes
---Type (1 Byte)
----choke 0 (No Payload)
----unchoke 1 (No Payload)
----interested 2 (No Payload)
----not interested 3 (No Payload)
----have 4 (Piece Index Field: 4 Bytes)
----bitfield 5 ()
-----First Message after handshake
-----Bitfield represents pieces peer has

----request 6 (Piece Index Field: 4 Bytes)

----piece 7 (Piece Index Field: 4 Bytes)
-----Content of piece
---Payload (Variable)


Peer Behavior
-Handshake & Bitfield
1. Establish TCB Connection
2. Peer A Sends Handshake Message. Receives Handshake from Peer B
3. Peer A Checks if correct neighbor via correct header + expected peer ID
3. Peer A Sends bitfield. Recieves bitfield from Peer B (sends nothing if it has no pieces)
4. If Peer B has pieces Peer A doesn't have, Peer A sends 'interested' message. Otherwise, 'not interested'

Choke & Unchoke
-Concurrent Connections Peer uploads to is limited to k (parameter when program starts)
--K preferred neighbors and 1 optimistically unchoked neighbor
-These neighbors are unchoked and all others are choked

-Peer A determines preferred neighbors every p seconds. Unchoking interval is p.
--Calculates downloading rate from each neighbor during previous interval.
--Selects k neighbors that fed it data at highest rate. Ties broken randomly
--Unchokes preferred neighbors if not unchoked and expects 'request' messages. chokes all others except optimistically unchoked neighbor

--When Peer A contains complete file, preferred neighbors selected randomly among those interested

-Peer A determines optimistically unchoked neighbor every m seconds. Optimistic unchoking interval is m
--Selected randomly among interested neighbors that are choked (Peer C)
--Sends 'unchoke' and expects 'request'
--Peer C can become preferred neighbor


Interested and Not Interested
-Peer A sends 'interested' if Peer B has pieces A does not have
-'interested' send after parsing 'bitfield' or 'have' message from Peer B

-Peer A maintains bitfields for all neighbors. Updates when 'have' is recieved.
-If Peer B does not have interesting pieces, sends 'not interested'
-Checks if 'not interested' should be sent when complete piece arrives


Request and Piece
-Peer A sends 'request' for piece it doesn't have and hasnt requested
--Peer A randomly chooses piece Peer B has that it doesnt have
--Peer B sends 'piece' with piece info
--Continues back and forth until Peer B chokes A or does not have interesting pieces
*Peer B may not send 'piece' if Peer A is choked


Implementation Specifics
-Config Files
--Common.cfg (Used by all peers)
---NumberOfPreferredNeighbors
---UnchokingInterval (seconds)
---OptimisticUnchokingInterval (seconds)
---FileName (name of file peers are interested in)
---FileSize (bytes)
---PieceSize (bytes)

--PeerInfo.cfg (Peer Info)
---Format: [peer ID] [host name] [listening port] [has file or not]
----Positive Int, String, Positive Int, '1' or '0'

-Peer Process
--'peerProcess' takes ID as parameter and starts in order specified
--Reads Common.cfg and sets variables. Reads PeerInfo.cfg and sents bitfield accordingly
--Peers make TCP connections to all peers started before it
---Starts Protocol when one connection made
--When All Peers have downloaded the complete file, termination can begin


-StartRemotePeers
--Java file to start peer clients

-File Handling
--Subdirectory 'peer_[ID]' used to contain complete/partial files

-Logging
--log file 'log_peer_[ID].log' in working directory

--TCP Connection
---[Time]: Peer [peer_ID 1] makes a connection to Peer [peer_ID 2]
---[Time]: Peer [peer_ID 1] is connected from Peer [peer_ID 2]

--Preferred Neighbors
---[Time]: Peer [peer_ID] has the preferred neighbors [preferred neighbor ID list]

--Optimistically Unchoked
---[Time]: Peer [peer_ID] has the optimistically unchoked neighbor [optimistically unchoked neighbor ID]

--Unchoking & Choking
---[Time]: Peer [peer_ID 1] is unchoked by [peer_ID 2]
---[Time]: Peer [peer_ID 1] is choked by [peer_ID 2]

--Have
---[Time]: Peer [peer_ID 1] received the ‘have’ message from [peer_ID 2] for the piece [piece index]

--Interested & Not Interested
---[Time]: Peer [peer_ID 1] received the ‘interested’ message from [peer_ID 2]
---[Time]: Peer [peer_ID 1] received the ‘not interested’ message from [peer_ID 2]

--Downloading Piece
---[Time]: Peer [peer_ID 1] has downloaded the piece [piece index] from [peer_ID 2]. Now the number of pieces it has is [number of pieces]

--Complete Download
---[Time]: Peer [peer_ID] has downloaded the complete file

***Use Port # Other than 6008